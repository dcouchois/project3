{"ast":null,"code":"import _slicedToArray from \"/Users/deannaguzman/Documents/project3/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/deannaguzman/Documents/project3/client/src/components/User/Form/Form.jsx\";\nimport React, { useState, useRef, Fragment } from \"react\";\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport User from '../../../utils/Stores/User';\nimport UserError from '../Error';\nvar _User$actions = User.actions,\n    USER_LOADING = _User$actions.USER_LOADING,\n    SET_USER = _User$actions.SET_USER,\n    USER_ERROR = _User$actions.USER_ERROR;\nexport default function (_ref) {\n  var api = _ref.api,\n      name = _ref.name,\n      className = _ref.className,\n      emailPattern = _ref.emailPattern,\n      passwordPattern = _ref.passwordPattern,\n      _ref$EmailMessage = _ref.EmailMessage,\n      EmailMessage = _ref$EmailMessage === void 0 ? \"\" : _ref$EmailMessage,\n      _ref$PasswordMessage = _ref.PasswordMessage,\n      PasswordMessage = _ref$PasswordMessage === void 0 ? \"\" : _ref$PasswordMessage;\n  User.refreshOnLoad();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      validated = _useState2[0],\n      setValidated = _useState2[1];\n\n  var _User$useContext = User.useContext(),\n      _User$useContext2 = _slicedToArray(_User$useContext, 2),\n\n  /* user not needed */\n  userDispatch = _User$useContext2[1];\n\n  var emailInput = useRef();\n  var passwordInput = useRef();\n\n  var handleSubmit = function handleSubmit(event) {\n    event.preventDefault();\n    var form = event.currentTarget;\n\n    if (form.checkValidity() === false) {\n      setValidated(true);\n      return;\n    }\n\n    var email = emailInput.current.value;\n    var password = passwordInput.current.value; // If we have an email and password we run the loginUser function and clear the form\n\n    doUserFunc(email, password);\n  }; // doUserFunc does a post to our \"api/login\" route and if successful, redirects us the the members page\n\n\n  function doUserFunc(email, password) {\n    setValidated(false);\n    userDispatch({\n      type: USER_LOADING\n    });\n    api({\n      email: email,\n      password: password\n    }).then(function (user) {\n      userDispatch({\n        type: SET_USER,\n        user: user\n      });\n    }).catch(function (err) {\n      userDispatch({\n        type: USER_ERROR,\n        message: err\n      });\n    });\n  }\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, name, \" Form\"), React.createElement(Form, {\n    validated: validated,\n    onSubmit: handleSubmit,\n    className: className,\n    noValidate: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(Form.Group, {\n    controlId: \"formBasicEmail\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Email address\"), React.createElement(Form.Control, {\n    required: true,\n    pattern: emailPattern,\n    type: \"email\",\n    placeholder: \"Enter email\",\n    ref: emailInput,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(EmailMessage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }))), React.createElement(Form.Group, {\n    controlId: \"formBasicPassword\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"Password\"), React.createElement(Form.Control, {\n    required: true,\n    pattern: passwordPattern,\n    type: \"password\",\n    placeholder: \"Password\",\n    ref: passwordInput,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(PasswordMessage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }))), React.createElement(UserError, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), React.createElement(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, name)));\n}","map":{"version":3,"sources":["/Users/deannaguzman/Documents/project3/client/src/components/User/Form/Form.jsx"],"names":["React","useState","useRef","Fragment","Form","Button","User","UserError","actions","USER_LOADING","SET_USER","USER_ERROR","api","name","className","emailPattern","passwordPattern","EmailMessage","PasswordMessage","refreshOnLoad","validated","setValidated","useContext","userDispatch","emailInput","passwordInput","handleSubmit","event","preventDefault","form","currentTarget","checkValidity","email","current","value","password","doUserFunc","type","then","user","catch","err","message"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAkD,OAAlD;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,IAAP,MAAiB,4BAAjB;AACA,OAAOC,SAAP,MAAsB,UAAtB;oBAE+CD,IAAI,CAACE,O;IAA5CC,Y,iBAAAA,Y;IAAcC,Q,iBAAAA,Q;IAAUC,U,iBAAAA,U;AAEhC,eAAe,gBAQZ;AAAA,MAPCC,GAOD,QAPCA,GAOD;AAAA,MANCC,IAMD,QANCA,IAMD;AAAA,MALCC,SAKD,QALCA,SAKD;AAAA,MAJCC,YAID,QAJCA,YAID;AAAA,MAHCC,eAGD,QAHCA,eAGD;AAAA,+BAFCC,YAED;AAAA,MAFCA,YAED,kCAFgB,EAEhB;AAAA,kCADCC,eACD;AAAA,MADCA,eACD,qCADmB,EACnB;AACCZ,EAAAA,IAAI,CAACa,aAAL;;AADD,kBAEmClB,QAAQ,CAAC,KAAD,CAF3C;AAAA;AAAA,MAEQmB,SAFR;AAAA,MAEmBC,YAFnB;;AAAA,yBAG+Cf,IAAI,CAACgB,UAAL,EAH/C;AAAA;;AAGQ;AAAuBC,EAAAA,YAH/B;;AAIC,MAAMC,UAAU,GAAGtB,MAAM,EAAzB;AACA,MAAMuB,aAAa,GAAGvB,MAAM,EAA5B;;AAEA,MAAMwB,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;AAC1BA,IAAAA,KAAK,CAACC,cAAN;AACA,QAAMC,IAAI,GAAGF,KAAK,CAACG,aAAnB;;AACA,QAAID,IAAI,CAACE,aAAL,OAAyB,KAA7B,EAAoC;AAChCV,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA;AACH;;AACD,QAAMW,KAAK,GAAGR,UAAU,CAACS,OAAX,CAAmBC,KAAjC;AACA,QAAMC,QAAQ,GAAGV,aAAa,CAACQ,OAAd,CAAsBC,KAAvC,CAR0B,CAU1B;;AACAE,IAAAA,UAAU,CAACJ,KAAD,EAAQG,QAAR,CAAV;AACH,GAZD,CAPD,CAqBC;;;AACA,WAASC,UAAT,CAAoBJ,KAApB,EAA2BG,QAA3B,EAAqC;AACjCd,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,IAAAA,YAAY,CAAC;AAAEc,MAAAA,IAAI,EAAE5B;AAAR,KAAD,CAAZ;AACAG,IAAAA,GAAG,CAAC;AACAoB,MAAAA,KAAK,EAALA,KADA;AAEAG,MAAAA,QAAQ,EAARA;AAFA,KAAD,CAAH,CAGGG,IAHH,CAGQ,UAAAC,IAAI,EAAI;AACZhB,MAAAA,YAAY,CAAC;AAAEc,QAAAA,IAAI,EAAE3B,QAAR;AAAkB6B,QAAAA,IAAI,EAAJA;AAAlB,OAAD,CAAZ;AACH,KALD,EAKGC,KALH,CAKS,UAACC,GAAD,EAAS;AACdlB,MAAAA,YAAY,CAAC;AAAEc,QAAAA,IAAI,EAAE1B,UAAR;AAAoB+B,QAAAA,OAAO,EAAED;AAA7B,OAAD,CAAZ;AACH,KAPD;AAQH;;AAED,SACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK5B,IAAL,UADJ,EAEI,oBAAC,IAAD;AACI,IAAA,SAAS,EAAEO,SADf;AAEI,IAAA,QAAQ,EAAEM,YAFd;AAGI,IAAA,SAAS,EAAEZ,SAHf;AAII,IAAA,UAAU,MAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKI,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAC,gBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAEI,oBAAC,IAAD,CAAM,OAAN;AACI,IAAA,QAAQ,MADZ;AAEI,IAAA,OAAO,EAAEC,YAFb;AAGI,IAAA,IAAI,EAAC,OAHT;AAII,IAAA,WAAW,EAAC,aAJhB;AAKI,IAAA,GAAG,EAAES,UALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAQI,oBAAC,IAAD,CAAM,OAAN,CAAc,QAAd;AAAuB,IAAA,IAAI,EAAC,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CARJ,CALJ,EAkBI,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAC,mBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEI,oBAAC,IAAD,CAAM,OAAN;AACI,IAAA,QAAQ,MADZ;AAEI,IAAA,OAAO,EAAER,eAFb;AAGI,IAAA,IAAI,EAAC,UAHT;AAII,IAAA,WAAW,EAAC,UAJhB;AAKI,IAAA,GAAG,EAAES,aALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAQI,oBAAC,IAAD,CAAM,OAAN,CAAc,QAAd;AAAuB,IAAA,IAAI,EAAC,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CARJ,CAlBJ,EA8BQ,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9BR,EA+BI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,SAAhB;AAA0B,IAAA,IAAI,EAAC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKZ,IADL,CA/BJ,CAFJ,CADJ;AAwCH","sourcesContent":["import React, { useState, useRef, Fragment } from \"react\";\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport User from '../../../utils/Stores/User';\nimport UserError from '../Error';\n\nconst { USER_LOADING, SET_USER, USER_ERROR } = User.actions;\n\nexport default function ({\n    api,\n    name,\n    className,\n    emailPattern,\n    passwordPattern,\n    EmailMessage = \"\",\n    PasswordMessage = \"\"\n}) {\n    User.refreshOnLoad();\n    const [validated, setValidated] = useState(false);\n    const [/* user not needed */, userDispatch] = User.useContext();\n    const emailInput = useRef();\n    const passwordInput = useRef();\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            setValidated(true);\n            return;\n        }\n        const email = emailInput.current.value;\n        const password = passwordInput.current.value;\n\n        // If we have an email and password we run the loginUser function and clear the form\n        doUserFunc(email, password);\n    };\n\n    // doUserFunc does a post to our \"api/login\" route and if successful, redirects us the the members page\n    function doUserFunc(email, password) {\n        setValidated(false);\n        userDispatch({ type: USER_LOADING });\n        api({\n            email,\n            password\n        }).then(user => {\n            userDispatch({ type: SET_USER, user });\n        }).catch((err) => {\n            userDispatch({ type: USER_ERROR, message: err });\n        });\n    }\n\n    return (\n        <Fragment>\n            <h2>{name} Form</h2>\n            <Form\n                validated={validated}\n                onSubmit={handleSubmit}\n                className={className}\n                noValidate>\n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Email address</Form.Label>\n                    <Form.Control\n                        required\n                        pattern={emailPattern}\n                        type=\"email\"\n                        placeholder=\"Enter email\"\n                        ref={emailInput} />\n                    <Form.Control.Feedback type=\"invalid\">\n                        <EmailMessage />\n                    </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control\n                        required\n                        pattern={passwordPattern}\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        ref={passwordInput} />\n                    <Form.Control.Feedback type=\"invalid\">\n                        <PasswordMessage />\n                    </Form.Control.Feedback>\n                </Form.Group>\n                    <UserError />\n                <Button variant=\"primary\" type=\"submit\">\n                    {name}\n                </Button>\n            </Form>\n        </Fragment>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}